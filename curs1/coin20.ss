#lang racket
(define VARIANT 27)
(define LAST--DIGIT--OF--GROUP--NUMBER 7)
(define KINDS--OF--COINS 4)
(define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
        
              ((not(<= 0 amount)) 0)
              ((= kinds-of-coins 0) 0)
               
        (else (+ (cc amount (+ kinds-of-coins (- 1))) (cc (+ amount (- (first-denomination kinds-of-coins))) kinds-of-coins)))
  )
)
(define (count-change amount kinds-of-coins)
   (display "count-change for ")
   (display amount)
   (display " ")
   (display kinds-of-coins)
   (display " \t= ")
  (cond ((not(<= amount 0)) (cond ((not(<= kinds-of-coins 0))
                            (cond((not(<=(first-denomination kinds-of-coins) 0)) (cc amount kinds-of-coins))
                            (else (let() (display "(improper parameter value) ") 0)))
                            )
                            (else (let() (display "(improper parameter value) ") 0))))
                            (else (let() (display "(improper parameter value) ") 0))
                            )
       
)
  
(define (first-denomination kinds-of-coins) (cond ((= kinds-of-coins 1) 1)
                                                  ((= kinds-of-coins 2) 3)
                                                  ((= kinds-of-coins 3) 20)
                                                  ((= kinds-of-coins 4) 25)
                                         
                                                  (else 0)
                                                  ))

(define (GR-AMOUNT) (remainder (+ (* 100 LAST--DIGIT--OF--GROUP--NUMBER) VARIANT) 137))

(display "CHNA variant ")
(display VARIANT)
(newline)
(display "1-3-20-25")
(newline)
(display (count-change 100 KINDS--OF--COINS))
(newline)
(display (count-change (GR-AMOUNT) KINDS--OF--COINS))
(newline)
(display (count-change 100 100))