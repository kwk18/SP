BIT COUNT ------------
#lang racket
;bit-count

(define(even-bits n)
  (cond((= n 0)1)
       ((=(remainder n 2)0)
          (even-bits (quotient n 2)))
       (else (odd-bits(quotient n 2)))
  )
)
(define(odd-bits n)
  (cond((= n 0)0)
       ((=(remainder n 2)0)
          (odd-bits (quotient n 2)))
       (else(even-bits(quotient n 2)))
   )
)
(define(bit-count n)
  (cond ((= n 0)0)
           (else (+(remainder n 2)(bit-count (quotient n 2))))
  )
)
(define(report-results n)
  (display "Happy birthday to you!\n\t")
  (display n)(newline)
  (display "\teven?\t") 

  (cond((=(even-bits n)1) (let()(display "Yes")1))(else(display "No") 0))
  (newline)
  (display "\todd?\t")
  (cond((=(odd-bits n)1) (let()(display "Yes")1))(else(display "No") 0))

  (newline)
  (display "bit-count = ")
  (bit-count n)
)
;***** Date of YOUR birthday *******
(define dd 18)
(define mm 09)
(define yyyy 1999)
;***********************************
(report-results (+ (* dd 1000000)
                   (* mm 10000)
                   yyyy))


 
COIN20______________
#lang racket
(define VARIANT 27)
(define LAST--DIGIT--OF--GROUP--NUMBER 7)
(define KINDS--OF--COINS 4)
(define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
        
              ((not(<= 0 amount)) 0)
              ((= kinds-of-coins 0) 0)
               
        (else (+ (cc amount (+ kinds-of-coins (- 1))) (cc (+ amount (- (first-denomination kinds-of-coins))) kinds-of-coins)))
  )
)
(define (count-change amount kinds-of-coins)
   (display "count-change for ")
   (display amount)
   (display " ")
   (display kinds-of-coins)
   (display " \t= ")
  (cond ((not(<= amount 0)) (cond ((not(<= kinds-of-coins 0))
                            (cond((not(<=(first-denomination kinds-of-coins) 0)) (cc amount kinds-of-coins))
                            (else (let() (display "(improper parameter value) ") 0)))
                            )
                            (else (let() (display "(improper parameter value) ") 0))))
                            (else (let() (display "(improper parameter value) ") 0))
                            )
       
)
  
(define (first-denomination kinds-of-coins) (cond ((= kinds-of-coins 1) 1)
                                                  ((= kinds-of-coins 2) 3)
                                                  ((= kinds-of-coins 3) 20)
                                                  ((= kinds-of-coins 4) 25)
                                         
                                                  (else 0)
                                                  ))

(define (GR-AMOUNT) (remainder (+ (* 100 LAST--DIGIT--OF--GROUP--NUMBER) VARIANT) 137))

(display "CHNA variant ")
(display VARIANT)
(newline)
(display "1-3-20-25")
(newline)
(display (count-change 100 KINDS--OF--COINS))
(newline)
(display (count-change (GR-AMOUNT) KINDS--OF--COINS))
(newline)
(display (count-change 100 100))

GOLDEN SECTION ---------------
#lang racket
;golden-section20
(define a 3)
(define b 5);2.32415
(define (fun x)

(set! x (+ x (-(/ 27 28))))
(+ (+ x (sin(+ (* 2 x) (-(/ pi 4)))) (log (+ x 1))) (- (/ 1 2))) )

(define (golden-section-search a b)
 (let(
      (xmin(cond((<= a b)(golden-start a b))(else (golden-start b a ))))
     )
     (newline)
     xmin
 )
)
(define (golden-start a b)
 (let(
      (xa (+ a (* mphi (+ b (- a)))))
      (xb (+ b ( - (* mphi(+ b (- a))))))
     )
     (try a b xa (fun xa) xb (fun xb))
 )
)

(define (set1 a b xa xb ya yb)
  (set! b xb)
  (set! xb xa)
  (set! yb ya)
  (set! xa (+ a (* mphi(+ b (- a)))))
  (try a b xa (fun xa) xb yb)
 )
(define (set2 a b xa xb ya yb)
  (set! a xa)
  (set! xa xb)
  (set! ya yb)
  (set! xb (+ b (-(* mphi(+ b (- a))))))
  (try a b xa ya xb (fun xb))
 )
(define mphi (/ (+ 3(- (sqrt 5))) 2))
(define (try a b xa ya xb yb)
 (cond((close-enough? a b)
      (/ (+ a b) 2))
      (else(let() (display "+")
             (cond((<= ya yb)(set1 a b xa xb ya yb))
                  (else(set2 a b xa xb ya yb))

             );cond...
      );let...
 ));if...
)
(define (close-enough? x y)
  (<= (abs (+ x (- y)))tolerance))
(define tolerance (/ 1 100000))
(define xmin 0)
(set! xmin(golden-section-search a b))
  (display"interval=\t[")
  (display a)
  (display" , ")
  (display b)
  (display"]\n")
  (display"xmin=\t\t")
xmin
  (display"f(xmin)=\t")
(fun xmin)